// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boilmodels

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Posts", testPosts)
	t.Run("Roles", testRoles)
	t.Run("Sessions", testSessions)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Posts", testPostsDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("Sessions", testSessionsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Posts", testPostsQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("Sessions", testSessionsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Posts", testPostsSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("Sessions", testSessionsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Posts", testPostsExists)
	t.Run("Roles", testRolesExists)
	t.Run("Sessions", testSessionsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Posts", testPostsFind)
	t.Run("Roles", testRolesFind)
	t.Run("Sessions", testSessionsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Posts", testPostsBind)
	t.Run("Roles", testRolesBind)
	t.Run("Sessions", testSessionsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Posts", testPostsOne)
	t.Run("Roles", testRolesOne)
	t.Run("Sessions", testSessionsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Posts", testPostsAll)
	t.Run("Roles", testRolesAll)
	t.Run("Sessions", testSessionsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Posts", testPostsCount)
	t.Run("Roles", testRolesCount)
	t.Run("Sessions", testSessionsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Posts", testPostsHooks)
	t.Run("Roles", testRolesHooks)
	t.Run("Sessions", testSessionsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Posts", testPostsInsert)
	t.Run("Posts", testPostsInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("Sessions", testSessionsInsert)
	t.Run("Sessions", testSessionsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("PostToUserUsingUser", testPostToOneUserUsingUser)
	t.Run("SessionToUserUsingUser", testSessionToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("RoleToUsers", testRoleToManyUsers)
	t.Run("UserToPosts", testUserToManyPosts)
	t.Run("UserToSessions", testUserToManySessions)
	t.Run("UserToRoles", testUserToManyRoles)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("PostToUserUsingPosts", testPostToOneSetOpUserUsingUser)
	t.Run("SessionToUserUsingSessions", testSessionToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("RoleToUsers", testRoleToManyAddOpUsers)
	t.Run("UserToPosts", testUserToManyAddOpPosts)
	t.Run("UserToSessions", testUserToManyAddOpSessions)
	t.Run("UserToRoles", testUserToManyAddOpRoles)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("RoleToUsers", testRoleToManySetOpUsers)
	t.Run("UserToRoles", testUserToManySetOpRoles)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("RoleToUsers", testRoleToManyRemoveOpUsers)
	t.Run("UserToRoles", testUserToManyRemoveOpRoles)
}

func TestReload(t *testing.T) {
	t.Run("Posts", testPostsReload)
	t.Run("Roles", testRolesReload)
	t.Run("Sessions", testSessionsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Posts", testPostsReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("Sessions", testSessionsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Posts", testPostsSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("Sessions", testSessionsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Posts", testPostsUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("Sessions", testSessionsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Posts", testPostsSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("Sessions", testSessionsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
